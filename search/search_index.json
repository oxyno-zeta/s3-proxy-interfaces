{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"S3-Proxy Interfaces"},{"location":"#what-is-this-project","title":"What is this project ?","text":"<p>This project is a monorepo of interfaces for S3-Proxy.</p> <p>S3-Proxy can be used to have a graphical interface over S3 buckets but the generated pages are simples, cannot offer the upload and delete feature,...</p> <p>This project allow to change this to have a better feature support and a Material based interface.</p> <p>Each interface is considered as a standalone project and have dedicated pages with features, instructions, ...</p>"},{"location":"#interfaces","title":"Interfaces","text":"Upload-only Dashboard"},{"location":"#want-to-contribute","title":"Want to contribute ?","text":"<ul> <li>Read the CONTRIBUTING guide</li> </ul>"},{"location":"#thanks","title":"Thanks","text":"<ul> <li>My wife BH to support me doing this</li> </ul>"},{"location":"#author","title":"Author","text":"<ul> <li>Oxyno-zeta (Havrileck Alexandre)</li> </ul>"},{"location":"#license","title":"License","text":"<p>Apache 2.0 (See in LICENSE)</p>"},{"location":"interfaces/dashboard/","title":"Dashboard","text":""},{"location":"interfaces/dashboard/#features","title":"Features","text":"<p>This interface provide those features:</p> <ul> <li>List files and \"folders\" on specific path</li> <li>Paginate list of results</li> <li>Allow to delete files on specific path</li> <li>Allow to upload files on specific path</li> <li>Allow to download all selected files on current page</li> <li>Upload files on local path</li> <li>Create subpath and upload in it</li> <li>Interface customizations</li> </ul>"},{"location":"interfaces/dashboard/#installation-instruction","title":"Installation instruction","text":"<p>Important</p> <p>Require S3-Proxy 4.X to work with default templates on target bucket. All the other configurations like webhooks, put metadata, ... can be configured as you want.</p> <ul> <li>Download interface archive release on Github releases</li> <li>Open archive and extract files</li> <li>Upload files in S3 bucket (named <code>INTERFACE-BUCKET</code> for the next part)</li> <li>Configure S3-Proxy application like the following example</li> </ul> <p>Note</p> <p>The <code>INTERFACE-BUCKET</code> and the <code>FILES-BUCKET</code> can be the same, you can just manage the bucket prefix to differentiate targets.</p> <pre><code># Targets\ntargets:\ninterface:\nmount:\npath:\n- /\nactions:\nGET:\nenabled: true\nconfig:\nindexDocument: index.html\nbucket:\nname: INTERFACE-BUCKET\nregion: eu-west-1\nprefix:\nfiles:\nmount:\npath:\n- /files/\nactions:\nGET:\nenabled: true\n# Only if you want to enable upload\nPUT:\nenabled: true\n# Only if you want to enable delete\nDELETE:\nenabled: true\nbucket:\nname: FILES-BUCKET\nregion: eu-west-1\nprefix:\n</code></pre>"},{"location":"interfaces/dashboard/#extrajs","title":"ExtraJS","text":""},{"location":"interfaces/dashboard/#purpose","title":"Purpose","text":"<p>ExtraJS is an object that allow the interface customization.</p> <p>To do this, you can implement one or many functions showed in the following interface.</p> <p>You have to edit the <code>extra-js.js</code> file at the interface root level.</p>"},{"location":"interfaces/dashboard/#supported-interface","title":"Supported interface","text":"<pre><code>declare let ExtraJS: {\n// Validation will be call in order to validate upload key on each key pressed\n// Params:\n// - uploadKey: Upload Key value from input\n// - t: function to translate a key\n// Return:\n// Error message that will be displayed. If return is an empty string,\n// result will be interpreted as no error.\nvalidateUploadKey(uploadKey: string, t: (key: string) =&gt; string): string;\n// GetUploadSettings will allow to get upload settings for Uppy.\n// Return:\n// Partial object that will be spread on Uppy settings.\ngetUploadSettings(): object;\n// GetLogoConfiguration will return the logo configuration.\n// Return:\n// Will return an object with src.\ngetLogoConfiguration(): { src: string };\n// GetTitle will return the page title.\n// Return:\n// Will return the page title.\ngetTitle(): string;\n// GetFooter will be called to get the footer value.\n// Return:\n// Will return a string representing the footer to display.\ngetFooter(): string;\n// Initialize will be run on page startup.\n// This is done in order to load some context that can be interesting to you for another function.\n// Return:\n// A promise. When an error is thrown, it is logged in the console and an error message is displayed.\ninitialize(): Promise&lt;void&gt;;\n// IsPoweredByEnabled will return boolean value to know if powered by message must be display.\n// Return:\n// Will return boolean value to know if powered by message must be display.\nisPoweredByEnabled(): boolean;\n// IsDeleteFeatureEnabled will allow to know if delete feature is enabled.\n// Params:\n// - path: actual ui path\n// Return:\n// Will return a boolean to know if delete feature is enabled.\nisDeleteFeatureEnabled(path: string): boolean;\n// IsUploadFeatureEnabled will allow to know if upload feature is enabled.\n// Params:\n// - path: actual ui path\n// Return:\n// Will return a boolean to know if upload feature is enabled.\nisUploadFeatureEnabled(path: string): boolean;\n// isDownloadAllSelectedFeatureEnabled will allow to know if download all selected feature is enabled.\n// Params:\n// - path: actual ui path\n// Return:\n// Will return a boolean to know if download all selected feature is enabled.\nisDownloadAllSelectedFeatureEnabled(path: string): boolean;\n// GetCustomTheme will return a custom theme.\n// Return:\n// Should returns an object that will be taken by createTheme function.\n// Documentation: https://mui.com/customization/theming/#createtheme-options-args-theme\ngetCustomTheme(): object;\n// GetBaseURL will allow to return the base url used for listing files, getting file or uploads.\n// Note: Deletes are excluded because api provide path for api actions.\n// Return:\n// Will return a string containing the base url.\ngetBaseURL(): string;\n// GetExtraHeaders will return extra headers that will be injected on GET and DELETE requests.\n// For uploads, use the 'getUploadSettings' function.\n// Return:\n// Will return an object that will contain headers and values that will be injected on requests.\ngetExtraHeaders(): Record&lt;string, string&gt;;\n// GetAxiosTransformResponse will return an Axios transformResponse function that will be used on\n// axios GET and DELETE requests.\n// Return:\n// Will return an Axios transformResponse function.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ngetAxiosTransformResponse(): (data: any) =&gt; any;\n};\n</code></pre>"},{"location":"interfaces/upload-only/","title":"Upload-only","text":""},{"location":"interfaces/upload-only/#features","title":"Features","text":"<p>This interface provide those features:</p> <ul> <li>Upload files on local path</li> <li>Create subpath and upload in it</li> <li>Interface customizations</li> </ul>"},{"location":"interfaces/upload-only/#installation-instruction","title":"Installation instruction","text":"<p>Important</p> <p>Require S3-Proxy 4.X to work with default templates on target bucket. All the other configurations like webhooks, put metadata, ... can be configured as you want.</p> <ul> <li>Download interface archive release on Github releases</li> <li>Open archive and extract files</li> <li>Upload files in S3 bucket (named <code>INTERFACE-BUCKET</code> for the next part)</li> <li>Configure S3-Proxy application like the following example</li> </ul> <p>Note</p> <p>The <code>INTERFACE-BUCKET</code> and the <code>FILES-BUCKET</code> can be the same, you can just manage the bucket prefix to differentiate targets.</p> <pre><code># Targets\ntargets:\ninterface:\nmount:\npath:\n- /\nactions:\nGET:\nenabled: true\nconfig:\nindexDocument: index.html\nbucket:\nname: INTERFACE-BUCKET\nregion: eu-west-1\nprefix:\nupload:\nmount:\npath:\n- /upload/\nactions:\nGET:\nenabled: false\nPUT:\nenabled: true\nbucket:\nname: FILES-BUCKET\nregion: eu-west-1\nprefix:\n</code></pre>"},{"location":"interfaces/upload-only/#extrajs","title":"ExtraJS","text":""},{"location":"interfaces/upload-only/#purpose","title":"Purpose","text":"<p>ExtraJS is an object that allow the interface customization.</p> <p>To do this, you can implement one or many functions showed in the following interface.</p> <p>You have to edit the <code>extra-js.js</code> file at the interface root level.</p>"},{"location":"interfaces/upload-only/#supported-interface","title":"Supported interface","text":"<pre><code>declare let ExtraJS: {\n// Validation will be call in order to validate upload key on each key pressed\n// Params:\n// - uploadKey: Upload Key value from input\n// - t: function to translate a key\n// Return:\n// Error message that will be displayed. If return is an empty string,\n// result will be interpreted as no error.\nvalidateUploadKey(uploadKey: string, t: (key: string) =&gt; string): string;\n// GenerateEndpoint will be call in order to have the endpoint depending on upload key\n// This is called on each key pressed in upload key input.\n// Params:\n// - uploadKey: Upload Key value from input\n// Return:\n// Will return the upload endpoint.\ngenerateEndpoint(uploadKey: string): string;\n// GetUploadSettings will allow to get upload settings for Uppy.\n// Return:\n// Partial object that will be spread on Uppy settings.\ngetUploadSettings(): object;\n// GetInitialUploadKey will be called to get the initial upload key value.\n// Return:\n// Initial upload key value.\ngetInitialUploadKey(): string;\n// GetLogoConfiguration will return the logo configuration.\n// Return:\n// Will return an object with src, image alt, width and height values.\ngetLogoConfiguration(): {\nsrc: string;\nalt: string;\nwidth: string;\nheight: string;\n};\n// GetFooter will be called to get the footer value.\n// Return:\n// Will return a string representing the footer to display.\ngetFooter(): string;\n// Initialize will be run on page startup.\n// This is done in order to load some context that can be interesting to you for another function.\n// Return:\n// A promise. When an error is thrown, it is logged in the console and an error message is displayed.\ninitialize(): Promise&lt;void&gt;;\n// IsPoweredByEnabled will return boolean value to know if powered by message must be display.\n// Return:\n// Will return boolean value to know if powered by message must be display.\nisPoweredByEnabled(): boolean;\n// GetCustomTheme will return a custom theme.\n// Return:\n// Should returns an object that will be taken by createTheme function.\n// Documentation: https://mui.com/customization/theming/#createtheme-options-args-theme\ngetCustomTheme(): object;\n};\n</code></pre>"}]}